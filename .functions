#!/bin/sh

# List all files, long format, colorized, permissions in octal
function la(){
  ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

log() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}

c() {
  # This lets you quickly jump into a project directory.
  #
  # Type:
  #
  #   c <tab>
  #
  # ...to autocomplete on all of your projects in the directories specified in
  # `functions/_c`. Typically I'm using it like:
  #
  #    c holm<tab>/bo<tab>
  #
  # ...to quickly jump into holman/boom, for example.
  #
  # This also accounts for how Go structures its projects. For example, it will
  # autocomplete both on $PROJECTS, and also assume you want to autocomplete on
  # your Go projects in $GOPATH/src.

  if [ ! -z "$1" ] && [ -s "$GOPATH/src/github.com/$1" ]; then
    cd "$GOPATH/src/github.com/$1"
  else
    cd "$PROJECTS/$1"
  fi

}
